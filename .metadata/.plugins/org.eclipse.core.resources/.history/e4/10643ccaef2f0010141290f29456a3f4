package com.revati.airline;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.sql.*;

public class BookFlight extends javax.swing.JInternalFrame {
    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    public BookFlight() {
        initComponents();
        connect();
    }

    private void connect() {
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/Airline_Project", "root", "your_password");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database Connection Error: " + e.getMessage());
        }
    }

    // Search Customer
    private void searchCustomer() {
        String custID = txtCustomerID.getText();

        try {
            pst = con.prepareStatement("SELECT FirstName, LastName, Gender, Contact FROM Customer WHERE CustomerID = ?");
            pst.setString(1, custID);
            rs = pst.executeQuery();

            if (rs.next()) {
                txtFirstName.setText(rs.getString("FirstName"));
                txtLastName.setText(rs.getString("LastName"));
                txtGender.setText(rs.getString("Gender"));
                txtContact.setText(rs.getString("Contact"));
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Search Error: " + ex.getMessage());
        }
    }

    // Search Flights
    private void searchFlights() {
        String arrival = comboArrival.getSelectedItem().toString();
        String departure = comboDeparture.getSelectedItem().toString();

        try {
            pst = con.prepareStatement("SELECT * FROM Flight WHERE Arrival = ? AND Departure = ?");
            pst.setString(1, arrival);
            pst.setString(2, departure);
            rs = pst.executeQuery();

            DefaultTableModel model = (DefaultTableModel) flightTable.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("FlightID"),
                    rs.getString("FlightName"),
                    rs.getString("Arrival"),
                    rs.getString("Departure"),
                    rs.getString("Duration"),
                    rs.getString("Date")
                });
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Flight Search Error: " + ex.getMessage());
        }
    }

    // Calculate Fare
    private void calculateFare() {
        try {
            int fare = Integer.parseInt(txtFare.getText());
            int tickets = Integer.parseInt(txtTotalTickets.getText());
            int total = fare * tickets;
            txtTotalFare.setText(String.valueOf(total));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid fare or ticket count");
        }
    }

    // Book Ticket
    private void bookTicket() {
        String ticketID = "TICK" + System.currentTimeMillis();  // simple unique ID
        int row = flightTable.getSelectedRow();
        String flightID = flightTable.getValueAt(row, 0).toString();
        String arrival = flightTable.getValueAt(row, 2).toString();
        String departure = flightTable.getValueAt(row, 3).toString();

        try {
            pst = con.prepareStatement("INSERT INTO Ticket (TicketID, FlightID, CustomerID, Arrival, Departure, FirstName, LastName, Gender, Contact) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            pst.setString(1, ticketID);
            pst.setString(2, flightID);
            pst.setString(3, txtCustomerID.getText());
            pst.setString(4, arrival);
            pst.setString(5, departure);
            pst.setString(6, txtFirstName.getText());
            pst.setString(7, txtLastName.getText());
            pst.setString(8, txtGender.getText());
            pst.setString(9, txtContact.getText());

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Ticket Booked Successfully!");

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Booking Failed: " + ex.getMessage());
        }
    }

    // Auto-generated GUI Components
    private void initComponents() {
        setTitle("Book Ticket");

        // ... add all your JLabel, JTextField, JButton, JComboBox, JTable etc.

        // Example action listener for search customer button
        searchButton.addActionListener(e -> searchCustomer());
        searchFlightButton.addActionListener(e -> searchFlights());
        calculateFareButton.addActionListener(e -> calculateFare());
        bookButton.addActionListener(e -> bookTicket());
    }

    // GUI variables (example)
    private JTextField txtCustomerID, txtFirstName, txtLastName, txtGender, txtContact, txtFare, txtTotalTickets, txtTotalFare;
    private JComboBox<String> comboArrival, comboDeparture;
    private JTable flightTable;
    private JButton searchButton, searchFlightButton, calculateFareButton, bookButton;
}
